name: Build and Push CBC Static Library

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      cbc_version:
        description: 'CBC version/tag to build (e.g., 2.10.12, master, releases/2.10.11)'
        required: false
        default: '2.10.12'

env:
  DOCKER_REGISTRY: docker.io
  # Change this to your Docker Hub username
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  IMAGE_NAME: coin-cbc-static

jobs:
  build-and-push:
    strategy:
      matrix:
        platform:
          - docker-platform: linux/arm64
            runs-on: ubuntu-22.04-arm
          - docker-platform: linux/amd64
            runs-on: ubuntu-22.04

    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine CBC version
        id: cbc_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.cbc_version }}" ]; then
            echo "version=${{ github.event.inputs.cbc_version }}" >> $GITHUB_OUTPUT
          else
            echo "version=2.10.12" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch builds
            type=ref,event=branch
            # PR builds
            type=ref,event=pr
            # Latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # CBC version tag
            type=raw,value=${{ steps.cbc_version.outputs.version }},enable={{is_default_branch}}
            # Date-based tag for main branch
            type=raw,value=${{ steps.cbc_version.outputs.version }}-{{date 'YYYY-MM-DD'}},enable={{is_default_branch}}
            # SHA-based tags
            type=sha,format=short,prefix={{branch}}-
            # Platform suffix
            type=raw,value=latest-${{ matrix.platform.docker-platform }},enable={{is_default_branch}}
          flavor: |
            latest=auto
            suffix=-${{ matrix.platform.docker-platform }},onlatest=false

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: ${{ matrix.platform.docker-platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CBC_VERSION=${{ steps.cbc_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Determine CBC version
        id: cbc_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.cbc_version }}" ]; then
            echo "version=${{ github.event.inputs.cbc_version }}" >> $GITHUB_OUTPUT
          else
            echo "version=2.10.12" >> $GITHUB_OUTPUT
          fi

      - name: Create multi-platform manifest
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.cbc_version.outputs.version }} \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest-linux/arm64 \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest-linux/amd64